# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ocr.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
import requests
import ddddocr
import sys


class Ui_MainWindow(QtGui.QWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(494, 430)
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonTextOnly)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(390, 50, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.get_images)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(390, 100, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.set_download_dir)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(300, 160, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.ocr_get)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 50, 61, 21))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(50, 100, 61, 21))
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(110, 50, 261, 21))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(110, 100, 261, 21))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox.setGeometry(QtCore.QRect(180, 160, 42, 22))
        self.spinBox.setProperty("value", 10)
        self.spinBox.setObjectName("spinBox")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(90, 160, 81, 21))
        self.label_3.setObjectName("label_3")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(50, 220, 401, 151))
        self.textEdit.setReadOnly(True)
        self.textEdit.setMarkdown("")
        self.textEdit.setObjectName("textEdit")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(190, 190, 101, 21))
        self.label_4.setTextFormat(QtCore.Qt.AutoText)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 494, 23))
        self.menubar.setObjectName("menubar")
        self.menuby_xianyv = QtWidgets.QMenu(self.menubar)
        self.menuby_xianyv.setObjectName("menuby_xianyv")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuby_xianyv.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "网址链接"))
        self.pushButton_2.setText(_translate("MainWindow", "重置路径"))
        self.pushButton_3.setText(_translate("MainWindow", "OCR识别"))
        self.label.setText(_translate("MainWindow", "网址："))
        self.label_2.setText(_translate("MainWindow", "图片路径："))
        self.lineEdit_2.setPlaceholderText(_translate("MainWindow", "./images/"))
        self.label_3.setText(_translate("MainWindow", "默认下载数量："))
        self.textEdit.setMarkdown("输出结果")
        self.label_4.setText(_translate("MainWindow", "输出结果"))
        self.menuby_xianyv.setTitle(_translate("MainWindow", "by xianyv"))

    def set_download_dir(self):
        self.dir = "./aaaaa/"
        if self.lineEdit_2.text() == "":
            self.dir = self.lineEdit_2.placeholderText()
        else:
            self.dir = self.lineEdit_2.text()

        if not os.path.exists(self.dir):
            os.mkdir(self.dir)

        if self.dir[-1] != "/":
            self.dir += "/"
        self.textEdit.setMarkdown("# 已重置路径")

        return self.dir

    def get_images(self):

        if self.lineEdit.text() != "":
            self.url = self.lineEdit.text()
            self.num = self.spinBox.text()
            self.dir = self.set_download_dir()

            for i in range(int(self.num)):
                try:
                    html = requests.get(url=self.url)
                except:
                    print("请求失败")
                    exit(0)

                with open(self.dir + "images" + str(i) + ".jpg", "wb") as f:
                    f.write(html.content)
            self.textEdit.setMarkdown("# 下载完成")

        else:
            self.textEdit.setMarkdown("# 请设置下载网站路径以http://或者https://为开始")

    def ocr_get(self):
        self.dir = self.set_download_dir()
        self.ocr = ddddocr.DdddOcr()
        return_head = "图片|验证码" + "\n" + ":-------|:---------:" + "\n"
        return_data = ""
        for file in os.listdir(self.dir):
            if os.path.isfile(self.dir + file):
                with open(self.dir + file, "rb") as f:
                    img_bytes = f.read()
                res = self.ocr.classification(img_bytes)
                return_data += file + "|" + res + "\n"
        self.textEdit.setMarkdown(return_head + return_data)


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
